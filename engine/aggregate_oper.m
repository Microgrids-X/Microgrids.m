function [oper_stats] = aggregate_oper(mg, oper_traj)
% AGGREGATE_OPER  aggregates operation time series into yearly statistics
%    [oper_stats] = aggregate_oper(mg, oper_traj)
%
%    the oper_traj structure generated by sim_operation gets synthetized by aggregate_oper.
%    Example of operation statistics in oper_stats:
%    load shedding rate, volume of fuel consumed...

%% 1. Import mg parameters and operation time series as local variables

nsteps = length(mg.load); % likely 8760
dt = mg.project.timestep; % operation timestep (h)

% Time series of the simulated operation over one year:
genPprod  = oper_traj.gen.Pprod; % Generator production (kW)
batPprod = oper_traj.bat.Pprod; % Battery production (kW)
Prenew_pot = oper_traj.Prenew_pot; %  Total renewable potential production (kW)
Pspill = oper_traj.Pspill; % Spillage of non-dispatchable (e.g. renewables) power
Pshed = oper_traj.load.Pshed; % Load shedding (kW)

% Generator parameters
genPrated = mg.gen.power_rated;
genFintercept = mg.gen.fuel_intercept; % Fuel curve intercept (L/h/kW_max)
genFslope = mg.gen.fuel_slope; % Fuel curve slope (l/h/kW)

%% 2. Compute simple yearly statistics (sum, max...):
Eload = sum(mg.load)*dt; % desired load energy (kWh/y)
Eshed = sum(Pshed)*dt; % Energy not served to the load (kWh/y)
Eserv = Eload - Eshed; % Energy actually served to the load (kWh/y)
shedHours = sum(Pshed>0)*dt; % Total duration of load shedding (h/y)
shedMax = max(Pshed); % max load shedding over all instants (kW)

Espill = sum(Pspill)*dt; % Spilled energy from renewables (kWh/y)
spillMax = max(Pspill); % max renewables spillage over all instants (kW)

batThroughput = sum(abs(batPprod))*dt; % battery throughput (kWh/y)
batCycles = batThroughput/(2*mg.bat.energy_rated); % battery cycling (cycles/y)

genEprod = sum(genPprod)*dt; % Energy produced by generator (kWh/y)

Erenew_pot = sum(Prenew_pot)*dt;

%% 3. Iterative computation of more complex yearly statistics

% Initialization of integrators:
shedDurationMax = 0; % max duration of consecutive load shedding (h)
shedDuration = 0; % duration of current load shedding in the iteration

genOperHours = 0; % operating hours (h/y)
genFuel = 0; % cumulated fuel consumption (L/y)

for i = 1:nsteps % for each operation instant
    % Generator statistics:
    if genPprod(i) > 0 % Generator ON
        genOperHours = genOperHours + dt;
        fuelConsump = genFintercept*genPrated + genFslope*genPprod(i); % instantaneous fuel consumption (l/h)
        genFuel = genFuel + fuelConsump*dt;
    end
   
    % Load shedding: maximum shedding duration
    if Pshed(i) > 0
        % count consecutive shedding duration
        shedDuration = shedDuration + dt;
        if shedDuration > shedDurationMax
            shedDurationMax = shedDuration; 
        end
    else
        % reset shedding duration counter:
        shedDuration = 0;
    end % if shedding
end % for each operation instant

%% Save aggregated operation statistics:

oper_stats.gen.hours = genOperHours;
oper_stats.gen.fuel = genFuel;
oper_stats.gen.energy = genEprod;

oper_stats.bat.cycles = batCycles; % battery cumulated cycling (cycles/y)
% TODO: add battery lost energy

oper_stats.load.Eserv = Eserv; % Energy served to the load (kWh/y)
oper_stats.load.Eshed = Eshed; % Energy not served to the load (kWh/y)
oper_stats.load.shedHours = shedHours; % Total duration of load shedding (h/y)
oper_stats.load.shedMax = shedMax; % max load shedding over all instants (kW)
oper_stats.load.shedDurationMax = shedDurationMax; % max duration of consecutive load shedding (h)
oper_stats.load.shedRate =  Eshed/Eload; % shedding rate in energy in [0,1]

oper_stats.Espill = Espill;
oper_stats.spillMax = spillMax;
oper_stats.Erenew_pot = Erenew_pot;
oper_stats.renewRate = 1 - genEprod/Eserv; % Renewable energy rate (%). Remark: not equal to Epv/Eserv due to curtailment

end % function
